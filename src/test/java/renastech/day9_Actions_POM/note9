
ACTIONS:
  Actions class is a collection of individual Action that you want to perform.
     -->Action class allows us to handle mouse and keyboard actions on the web pages.
     For example:
     -->hover over: moveToElement
     -->right click: contextClick
     -->dragAndDrop: allows us to drag and drop a web element
     -->clickAndHold: clicks onto something and waits for next command
     -->release:

     1-To get Actions methods, we need to create the instance of the actions class.
     2-And pass the driver instance into the constructor
     3-We must use: perform() method at the end to be able to perform any actions method.

Page Object model design pattern:

Page Object Model (POM) is a design pattern , popularly used in test automation
that creates Object Repository for web UI elements.(user interface which is what you see on the webpage)
The advantage of the model is that it reduces code duplication and improves test maintenance.

-Under this model, for each web page in the application , there should be a page class.
-This page class will identify the WebElements of that web page and
-also contains Page methods which perform steps with those WebElements.
-name of these methods should be given as per the task they are performing,
-i.e. , if a loading the page, class name will be login page, POM method name can be login()

IN POM Design you need to have some structure for each page:
1.PageFactory.initElements(driver, this);
   --> it creates connection between driver and object of class
2.@FindBy annotation to locate WebElements.
   --> Using this FindBy annotation, help us to locate web elements.
3.Create methods related webElements

Why Page Object Model? (REUSABLE, READABLE, AND MAINTAINABLE.)
-In the future, if there is a change in the web element,
you need to make change in just one class file and not 10 different scripts.
-That is achieved with POM and it makes code REUSABLE, READABLE and MAINTAINABLE.

-For Example, In the home page of the web application,
I have a menu bar which leads to different modules with different features.
While performing automation testing, many test cases would be clicking through these menu buttons to execute specific tests.
Now assume that the user Interface is CHANGED and all the menu buttons are relocated to a different position in home page.
So, this will result in automation tests to fail.Automated test cases will fail as scripts will not be able to find
particular element-locators to perform an action
Now, QA Engineer needs to walk through the whole code to update locators where necessary.
CHANGING the element-locators in the duplicated code will consume a lot of time to only adjust locators.
-Here, you can save this time by using the Page Object Model in our test automation framework.

//we dont want to store any locator inside utilities
//on the utilities you will store more generic common methods that you might use such as driver browser util
